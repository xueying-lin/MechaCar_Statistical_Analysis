install.packages("tidyverse")
> install.packages("jsonlite")
>install.packages("jsonlite")
>install.packages("jsonlite")
install.packages("jsonlite")
setwd("C:/Users/surface/Desktop/Data Bootcamp/Analysis project/Module 15 R statics")
setwd("C:/Users/surface/Desktop/Data Bootcamp/Analysis project/Module 15 R statics/R_Analysis")
setwd("C:/Users/surface/Desktop/Data Bootcamp/Analysis project/Module 15 R statics/R_Analysis")
setwd("C:/Users/surface/Desktop/Data Bootcamp/Analysis project/Module 15 R statics/R_Analysis/01_Demo")
x <- 3
x
x <- 5
x <- 3
numlist <- c(0,1,2,3,4,5,6,7,8,9)
?read.csv()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt="demo.json")
View(demo_table2)
> demo_table[3, "Year"]
demo_table[3, "Year"]
demo_table[3, 3]
demo_table$"Vehicle_Class"
demo_table$"Year"[3]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
View(demo_table2)
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
View(filter_table)
View(filter_table2)
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#step 1 capture the number of rows
num_rows<-1:nrow(demo_table)
#step 2 sample 3 of those rows
sample_rows<-sample(num_rows, 3)
#step 3 retrieved requested data within the demo_table
demo_table[sample_rows,]
#Combine all three steps
demo_table[sample(1:nrow(demo_table), 3), ]
library(tidyverse)
?mutate()
#add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(demo_table)
View(demo_table2)
#Create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
View(summarize_demo)
#create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
?gather()
#read demo2 data
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
> long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
?spread()
#change the long-table to wide_table
wide_table <- long_table %>% spread(key="Metric",value="Score")
#check if the newly created wide-formated table is exactly the same as original demo_table3
all.equal(demo_table3, wide_table)
?ggplot()
head(mpg)
#import dataset into ggplot2
plt <- ggplot(mpg, aes(x=class))
View(plt)
#plot a bar plot
plt + geom_bar()
?geom_bar()
#create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
#import dataset into ggplot2
plt2 <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
#plot a bar plot
plt2 + geom_col()
#Formating the plots
#plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt2 + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#plot a boxplot with labels
plt2 + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
#plot a boxplot with labels
plt2 + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate the x-axis label 45 degrees
theme(axis.text.y=element_text(angle=45,hjust=1))
#plot a boxplot with labels
plt2 + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))  #rotate the x-axis label 45 degrees
#create summary table for line chart
mpg_summary_line <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#import dataset into ggplot2
plt3 <- ggplot(mpg_summary_line,aes(x=cyl,y=Mean_Hwy))
#plot a line chart
plt + geom_line()
?geom_line()
rlang::last_error()
#plot a line chart
plt3 + geom_line()
#adjust the x-axis and y-axis tick values
#add line plot with labels
plt3 + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#Create the scatter plot
#import dataset into ggplot2
plt4 <- ggplot(mpg,aes(x=displ,y=cty))
#add scatter plot with labels
plt4 + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#format the scatter plot with colors, size
plt4 <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt4 + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#format the scatter plot with colors, size, shape
plt4 <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt4 + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive")
#format the scatter plot with colors, size, shape
plt4 <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv, size=cty))
plt4 + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive", size="MPG sizes")
View(demo_table3)
View(demo_table2)
View(demo_table)
#import dataset into ggplot2
plt5 <-ggplot(mpg,aes(y=hwy))
#add boxplot
plt5 + geom_boxplot()
create a set of boxplots comparing highway fuel efficiency for each car manufacturer
plt6 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt6 + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
#create a set of boxplots comparing highway fuel efficiency for each car manufacturer
plt6 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt6 + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1), color = blues9) #add boxplot and rotate x-axis labels 45 degrees
#create a set of boxplots comparing highway fuel efficiency for each car manufacturer
plt6 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt6 + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1), colour = blues9) #add boxplot and rotate x-axis labels 45 degrees
#create a set of boxplots comparing highway fuel efficiency for each car manufacturer
plt6 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt6 + geom_boxplot(colour = blues9) + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
#create a set of boxplots comparing highway fuel efficiency for each car manufacturer
plt6 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt6 + geom_boxplot(colour = blue) + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
#create a set of boxplots comparing highway fuel efficiency for each car manufacturer
plt6 <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt6 + geom_boxplot(colour = "#3366FF") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
##Heatmap
mpg_summary_heatmap <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt7 <- ggplot(mpg_summary_heatmap, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt7 + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary_heatmap2 <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt8 <- ggplot(mpg_summary_heatmap2, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt8 + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary_heatmap2 <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt8 <- ggplot(mpg_summary_heatmap2, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt8 + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary_heatmap2 <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt8 <- ggplot(mpg_summary_heatmap2, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt8 + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary_heatmap2 <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt8 <- ggplot(mpg_summary_heatmap2, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt8 + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=45,hjust=1,vjust=.85)) #rotate x-axis labels 90 degrees
mpg_summary_heatmap2 <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt8 <- ggplot(mpg_summary_heatmap2, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt8 + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=75,hjust=1,vjust=.85)) #rotate x-axis labels 90 degrees
##add scatterplot on the boxplots
plt9 <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt9 + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
##add layers that use different but complementary data to the original plot
mpg_summary_engine <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt10 <- ggplot(mpg_summary_engine,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt10 + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
##add layers that use different but complementary data to the original plot
mpg_summary_engine <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), SD_Engine=sd(displ), .groups = 'keep') #create summary table
plt10 <- ggplot(mpg_summary_engine,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt10 + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
###Faceting
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt11 <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt11 + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt11 + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
##Normality testing
#Qualitative test for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
#Quantitative test for normality
shapiro.test(mtcars$wt)
setwd("C:/Users/surface/Desktop/Data Bootcamp/Analysis project/Module 15 R statics/R_Analysis/02_statistic")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt_1 <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt_1 + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt_2 <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt_2 + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(100) #randomly sample 50 data points
plt_2 <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt_2 + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(100) #randomly sample 50 data points
plt_2 <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt_2 + geom_density() #visualize distribution using density plot
#compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#two-sample t-test
sample_table1 <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
#compare means of two samples
t.test(log10(sample_table1$Miles_Driven),log10(sample_table2$Miles_Driven))
##paired t-test
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
#compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
##One-way ANOVA
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
#Retrieve p-value
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt_3 <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt_3 + geom_point() #create scatter plot
#calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt_4 <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt_4 + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
###Linear regression
lm(qsec ~ hp,mtcars) #create linear model
###Sumarize linear model
summary(lm(qsec~hp,mtcars))
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
> plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt_5 <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt_5 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
##Multiple linear regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
###Chi-squared test
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/surface/Desktop/Data Bootcamp/Analysis project/Module 15 R statics/R_Analysis/challenge")
library(dplyr)
#import dataset
mechacar_mpg <- read.csv(MechaCar_mpg.csv"")
library(dplyr)
#import dataset
mechacar_mpg <- read.csv("MechaCar_mpg.csv")
View(mechacar_mpg)
#generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechacar_mpg)
#Generate summary statistic
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechacar_mpg))
#import dataset
suspension_coil <- read.csv("Suspension_Coil.csv", check.names=F,stringsAsFactors = F)
View(suspension_coil)
?summarize()
#import dataset
suspension_coil <- read.csv("Suspension_Coil.csv", check.names=F,stringsAsFactors = F)
#create summary table with multiple columns
summarize_coil <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),variance_PSI=var(PSI),sd_PSI=sd(PSI) .groups = 'keep')
#import dataset
suspension_coil <- read.csv("Suspension_Coil.csv", check.names=F,stringsAsFactors = F)
#create summary table with multiple columns
summarize_coil <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),variance_PSI=var(PSI),sd_PSI=sd(PSI), .groups = 'keep')
View(summarize_coil)
#create summary table with multiple columns
total_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),variance_PSI=var(PSI),sd_PSI=sd(PSI), .groups = 'keep')
View(total_summary)
View(suspension_coil)
#Create summary table
total_summary <- suspension_coil %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),variance_PSI=var(PSI),sd_PSI=sd(PSI), .groups = 'drop')
#create summary table with multiple columns
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),variance_PSI=var(PSI),sd_PSI=sd(PSI), .groups = 'keep')
View(lot_summary)
View(population_table)
?t.test()
##Deliverable 3
#test for normality(all lots)
plt <- ggplot(suspension_coil,aes(x=PSI)) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#compare means with population mean 1500
t.test(suspension_coil$PSI,1500)
#compare means with population mean 1500
t.test(suspension_coil$PSI,mu=1500)
#PSI sample for lot1
lot_1 = subset(suspension_coil, Manufacturing_Lot == "Lot1")
View(lot_1)
#Compare means with population mean 1500
t.test(lot_1$PSI,mu=1500)
#PSI sample for lot2
lot_2 = subset(suspension_coil, Manufacturing_Lot == "Lot2")
#Compare means with population mean 1500
t.test(lot_2$PSI,mu=1500)
#PSI sample for lot3
lot_3 = subset(suspension_coil, Manufacturing_Lot == "Lot3")
#Compare means with population mean 1500
t.test(lot_3$PSI,mu=1500)
View(mechacar_mpg)
View(mpg_2008)
View(mechacar_mpg)
View(mpg_2008)
View(mpg_data)
View(mpg_2008)
